{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setStyle","btntext","setText","className","style","id","type","onClick","defaultProps","Navbar","props","mode","href","title","togglemode","role","htmlFor","prototype","PropTypes","string","TextForm","text","heading","rows","value","onChange","event","console","log","target","newtext","toUpperCase","toLowerCase","chars","split","i","length","newText","join","document","getElementById","select","navigator","clipboard","writeText","Alert","capitalize","word","lower","charAt","slice","height","alert","message","App","setMode","setAlert","showAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.db54fc02.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n// import styled from 'styled-components';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst propTypes = {};\r\n\r\nconst defaultProps = {};\r\n\r\nconst About = () => {\r\n    const [mystyle,setStyle]=useState(\r\n        {\r\n            color: \"white\",\r\n            backgroundColor:\"black\"\r\n        }\r\n    );\r\n    const [btntext,setText]=useState(\r\n           \"Enable dark mode\"\r\n    );\r\n     \r\n    const toggleStyle = ()=>{\r\n        if(mystyle.color === 'white')\r\n        {\r\n            setStyle({\r\n                color: \"black\",\r\n                backgroundColor:\"white\"\r\n            })\r\n            setText(\"Enable Light mode\")\r\n        }else{\r\n            setStyle(\r\n                {\r\n                    color: \"white\",\r\n                    backgroundColor:\"black\"\r\n                  \r\n                }\r\n            )\r\n            setText(\"Enable Dark mode\")\r\n        }\r\n    }\r\n\r\n    return <div className=\"container\" style={mystyle}>\r\n           <h2 className='my-3'>About us</h2>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n</div>\r\n      <button className='btn btn-dark my-3' id='btn1' onClick={toggleStyle}>{btntext}</button>\r\n    </div>;\r\n}\r\n\r\nAbout.propTypes = propTypes;\r\nAbout.defaultProps = defaultProps;\r\n\r\n\r\nexport default About;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n// import {\r\n \r\n//   Link\r\n// } from \"react-router-dom\";\r\n// import styled from 'styled-components';\r\n// import PropTypes from 'prop-types';\r\n\r\n// #region constants\r\n\r\n// #endregion\r\n\r\n// #region styled-components\r\n\r\n// #endregion\r\n\r\n// #region functions\r\n\r\n// #endregion\r\n\r\n// #region component\r\nconst propTypes = {};\r\n\r\nconst defaultProps = {};\r\n\r\n/**\r\n * \r\n */\r\nconst Navbar = (props) => {\r\n    return <div>\r\n   <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n        </li>      \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form>  */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n    </div>\r\n    {/* work on the below options for more modes change the color of text */}\r\n    {/* <div class=\"btn-group\" role=\"group\">\r\n    <button id=\"btnGroupDrop1\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n     Modes\r\n    </button>\r\n    <ul class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\r\n      <li><div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" onClick={props.togglemode}  htmlFor=\"flexSwitchCheckDefault\">dark mode</label>\r\n    </div></li>\r\n      <li><div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">dark mode</label>\r\n    </div></li>\r\n    </ul>\r\n  </div> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n    </div>;\r\n}\r\n\r\nNavbar.prototype={\r\n    title: PropTypes.string\r\n}\r\nNavbar.propTypes = propTypes;\r\nNavbar.defaultProps = defaultProps;\r\n// #endregion\r\n\r\nexport default Navbar;\r\n","import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { useLazyTranslate } from 'react-google-translate';\r\n\r\n\r\n\r\nconst propTypes = {};\r\n\r\nconst defaultProps = {};\r\n\r\n\r\nconst TextForm = (props) => {\r\n  const [text, setText]= useState(\"\");\r\n  // const [language] = useState('zh-CN');\r\n  // const [translate, { data, loading }] = useLazyTranslate({\r\n  //   language \r\n  // });\r\n  // useEffect(() => {\r\n  //   if (text) {\r\n  //     translate(text, language);\r\n  //   }\r\n  // }, [translate, text])\r\n  // const [text] = useState('test');\r\n   const handleUpClick= ()=>{\r\n    //  console.log(\"used\");\r\n     let newtext=text.toUpperCase();\r\n     setText(newtext);\r\n   }\r\n   const handleLowClick= ()=>{\r\n    \r\n    let newtext=text.toLowerCase();\r\n    setText(newtext);\r\n  }\r\n  const handleAltClick= ()=>{\r\n \r\n    let chars = text.toLowerCase().split(\"\");\r\n    for (var i = 0; i < chars.length; i += 2) {\r\n      chars[i] = chars[i].toUpperCase();\r\n    }\r\n    let newText= chars.join(\"\");\r\n    setText(newText);\r\n  }\r\n  const handleCopy= ()=>{\r\n    \r\n    let newtext= document.getElementById(\"textBox\");\r\n      newtext.select();\r\n      navigator.clipboard.writeText(newtext.value);\r\n  }\r\n  const handleSpaces= ()=>{\r\n    \r\n    let newtext= text.split(/[ ]+/);//regex\r\n    setText(newtext.join(\" \"));\r\n  }\r\n  // const handleLangClick= ()=>{\r\n    \r\n  // const  render=() =>{\r\n  //     return (\r\n  //       <div>{loading ? 'Loading...' : data}</div>\r\n  //     )\r\n  //   }\r\n   \r\n  // }\r\n   const handleOnChange= (event)=>{\r\n    console.log(\"used\");\r\n    setText(event.target.value);\r\n  }\r\n    \r\n    return<> \r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n        \r\n      <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">{/*review this line again \r\nstyle={{color: props.mode==='dark'?'white':'black'}} not working*/}\r\n  \r\n  {/*review this line again \r\n    style={{backgroundcolour: props.mode==='dark'? 'Grey': 'white', color:props.mode=== 'dark'?'white': 'black'}}/*/}\r\n  <textarea className=\"form-control\" id=\"textBox\" rows=\"8\" value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}}  onChange={handleOnChange} ></textarea>\r\n</div>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Caps</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Lower Case</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleAltClick}>Aletrnate case</button>\r\n  <button className=\"btn btn-primary mx-2 my-3\" onClick={handleCopy}>Copy</button>\r\n  <button className=\"btn btn-primary mx-2\" onClick={handleSpaces}>Handle space</button>\r\n  {/* <button className=\"btn btn-primary mx-2\" onClick={handleLangClick}>change </button> */}\r\n    </div>\r\n     <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n       <h1>Text summary</h1>\r\n       <p>{ text.length>0?text.split(\" \").length:0} words and {text.length} characters</p>\r\n       <p>{0.008*text.length} minutes read</p>\r\n       <h2>Preview</h2>\r\n       <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n     </div>\r\n    </>;\r\n}\r\n\r\nTextForm.prototype={\r\n    heading: PropTypes.string\r\n}\r\nTextForm.propTypes = propTypes;\r\nTextForm.defaultProps = defaultProps;\r\n// #endregion\r\n\r\nexport default TextForm;\r\n\r\n","import React from 'react';\r\nconst propTypes = {};\r\nconst defaultProps = {};\r\n\r\n/**\r\n * \r\n */\r\n\r\nconst Alert = (props) => {\r\n    const capitalize = (word)=>{\r\n    const lower = word.toLowerCase();\r\n       return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return <>\r\n          \r\n          {/* <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message} \r\n        </div>}\r\n        </div> */}\r\n        {/* error in below line but if u put it in the the div another it works fine try to find why && is outside div */}\r\n        {/* putting function on message works */}\r\n        <div style={{height: '50px'}}>\r\n        {props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)}</strong>: {capitalize(props.alert.message)}\r\n    {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div> }\r\n      </div>\r\n      \r\n    </>;\r\n}\r\n\r\nAlert.propTypes = propTypes;\r\nAlert.defaultProps = defaultProps;\r\n// #endregion\r\n\r\nexport default Alert;","// import logo from './logo.svg';\nimport './App.css';\nimport React,{useState} from 'react';\nimport About from './components/About';\n// import styled from \"styled-component\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode,setMode]= useState('light');\n  const [alert,setAlert]=useState(null);\n   const showAlert=(message,type)=>{\n    //  you can show alert for various modes\n    setAlert({\n      message:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n  }, 3000);\n    }\n  const togglemode=()=>{\n    if(mode==='light')\n    {\n      setMode('dark');\n    //  document.getElementById(\"body\").innerHTML(style:\"\");\n       document.body.style.backgroundColor='black';\n      //  console.log(document.body.style.backgroundColor);\n      showAlert(\"dark mode has been enabled\",\"success\");\n    }else {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      // console.log(document.body.style.backgroundColor);\n      showAlert(\"light mode has been enabled\",\"success\");\n    }\n    \n  }\n  \n\n  \n  return (\n    <> \n    {/* <Router> */}\n <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode}/>\n <Alert alert={alert}/> \n <div className='container my-3'>\n   {/* updated  switchto routes */}\n {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element={<About />}/>  \n          <Route exact path=\"/\" element={<TextForm heading=\"Enter the text\" mode={mode} togglemode={togglemode}/>}/>       */}\n  {/* </Routes> */}\n  <TextForm heading=\"Enter the text\" mode={mode} togglemode={togglemode}/>\n {/* <About/> */}\n </div>\n {/* </Router> */}\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}